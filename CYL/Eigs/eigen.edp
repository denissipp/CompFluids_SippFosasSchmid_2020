include "../Common/intro.edp"

// Reynolds number defined in "../Common/intro.edp" 
cout << "Re = " << Re << endl;
cout << endl;
real nu=1./Re;

// shift for eigenvalue solver
complex sigma=1i*0.8; 

// Read and plot base-flow
Uvvp [ub1,ub2,pb];
{
 ifstream file("../BF/cbf.txt");
 file >> ub1[];
};
plot(ub1,value=1,wait=1);
plot(ub2,value=1,wait=1);

// Definition and building of matrix B (mass-matrix)
cout << "Matrix B" << endl;
varf b([u1,u2,p],[v1,v2,q])=int2d(th)(u1*v1+u2*v2);
matrix<complex> B= b(Uvvp,Uvvp,solver=CG); 

// Quantities needed for eigenvalue solver
int nev=30;
complex[int] ev(nev); // to store nev eigenvalues 
Uvvp<complex>[int] [eVu,eVv,eVp](nev);   // to store nev eigenvectors  
int k; // number of converged eigenvalues 

// Definition of Ashifted, computation of eigenvalues
{
	varf aShifted([du1,du2,dp],[v1,v2,q]) = // Shifted matrix
		int2d(th)(
		    -((ub1*dx(du1)+du1*dx(ub1)+ub2*dy(du1)+du2*dy(ub1))*v1)
            -((ub1*dx(du2)+du1*dx(ub2)+ub2*dy(du2)+du2*dy(ub2))*v2)
            - nu*(dx(du1)*dx(v1)+dy(du1)*dy(v1))
            - nu*(dx(du2)*dx(v2)+dy(du2)*dy(v2))
            + dp*(dx(v1)+dy(v2))
            + (dx(du1)+dy(du2))*q
			-sigma*(du1*v1+du2*v2))
  		+on(1,2,du1=0.,du2=0.)
		+on(4,du2=0.);

	cout << "Building matrix As" << endl;
	matrix<complex> As= aShifted(Uvvp,Uvvp,solver=GMRES);
	cout << "LU decompostion of As" << endl;
	set(As,solver=sparsesolver); 

	cout << "Eigenvalue solve" << endl;
	k=EigenValue(As,B,sigma=sigma,value=ev,vector=eVu,tol=0.,maxit=90000,ncv=150);
	k=min(k,nev);	//  some time the number of converged eigen value 
					// can be greater than nev;
};

// file to store eigenvalues
ofstream file("vp.txt");
file.precision(16);

// Loop on converged eigenvalues
for (int kk=0;kk<k;kk++)
{
	// Save kkth eigenvalue
	file << real(ev[kk]) << " " << imag(ev[kk]) << " " << kk << endl;
	// Save kkth eigenvector
	{
		ofstream fifi("evr"+kk+".txt");
		fifi.precision(16);
		fifi << eVu[kk][].re << endl;
 	}	
	{
		ofstream fifi("evi"+kk+".txt");
		fifi.precision(16);
		fifi << eVu[kk][].im << endl;
 	}	
}
